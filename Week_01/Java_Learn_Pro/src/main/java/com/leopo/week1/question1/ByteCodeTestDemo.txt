Compiled from "ByteCodeTestDemo.java"
public class com.leopo.week1.question1.ByteCodeTestDemo {
  public com.leopo.lesson1.ByteCodeTestDemo();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void main(java.lang.String[]);
    Code:
       0: iconst_0                                   //定义int常量0
       1: istore_1                                   //把上面定义的常量写到变量表的1位置，即sum
       2: iconst_0                                   //定义int常量0
       3: istore_2                                   //把上面定义的常量写到变量表的2位置，即index
       4: iload_2                                    //加载index到栈中
       5: bipush        10                           //把int常量值10压入栈中
       7: if_icmpge     33                           //for循环内的比较，用的是4和5标号压入栈的数，如果不满足，跳到33
      10: iload_1                                    //把sum压入栈中
      11: bipush        20                           //把int常量值20压入栈中
      13: if_icmpge     23                           //for循环内的if比较，用的是10、11标号压入栈的数，如果不满足，跳到标号23
      16: iload_1                                    //sum压入栈
      17: iload_2                                    //index压入栈
      18: imul                                       //sum*index
      19: istore_1                                   //标号18的结果存入sum
      20: goto          27                           //跳转到标号27
      23: iload_1                                    //sum压入栈
      24: iload_2                                    //index压入栈
      25: iadd                                       //sum+index
      26: istore_1                                   //标号25的结果存入sum
      27: iinc          2, 1                         //变量表2位置的值加1，即index加1
      30: goto          4                            //跳转到标号4
      33: iinc          1, -1                        //sum减1，此处和加用的一个字节码操作符，说明没有减的操作字节码
      36: iload_1                                    //sum压入栈
      37: iload_1                                    //sum压入栈
      38: imul                                       //sum*sum
      39: istore_1                                   //将38号的结果存入变量表
      40: iload_1                                    //sum压入栈
      41: iconst_2                                   //定义常量2，较小数用iconst_x，较大数用bipush
      42: idiv                                       //sum/2
      43: istore_1                                   //将42号的结果存入sum对应的变量表中的位置中
      44: return                                     //返回
}